# TUTORIAL: Publishing Java Packages with Maven - GitHub Actions
# Repository: https://github.com/LupuNicu/ACI-IT-Lab2
# Tutorial: https://docs.github.com/en/actions/tutorials/publish-packages/publish-java-packages-with-maven

## 📋 PAȘII IMPLEMENTĂRII

### PASUL 1: Configurarea pom.xml pentru Publishing

Am modificat fișierul `pom.xml` pentru a include configurația de publishing:

```xml
<!-- SCM Configuration -->
<scm>
    <connection>scm:git:git://github.com/LupuNicu/ACI-IT-Lab2.git</connection>
    <developerConnection>scm:git:ssh://github.com:LupuNicu/ACI-IT-Lab2.git</developerConnection>
    <tag>HEAD</tag>
    <url>https://github.com/LupuNicu/ACI-IT-Lab2</url>
</scm>

<!-- Distribution Management pentru GitHub Packages -->
<distributionManagement>
    <repository>
        <id>github</id>
        <name>GitHub Packages</name>
        <url>https://maven.pkg.github.com/LupuNicu/ACI-IT-Lab2</url>
    </repository>
</distributionManagement>
```

### PASUL 2: Workflow pentru Publishing la GitHub Packages

Am creat `.github/workflows/publish-github-packages.yml`:

```yaml
name: Publish package to GitHub Packages

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

### PASUL 3: Workflow pentru Publishing la Maven Central

Am creat `.github/workflows/publish-maven-central.yml`:

```yaml
name: Publish package to the Maven Central Repository

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Java for publishing to Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish to the Maven Central Repository
        run: mvn --batch-mode deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
```

### PASUL 4: Workflow pentru Dual Publishing (Ambele Registries)

Am creat `.github/workflows/publish-dual.yml`:

```yaml
name: Publish package to the Maven Central Repository and GitHub Packages

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - name: Set up Java for publishing to Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish to the Maven Central Repository
        run: mvn --batch-mode deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      - name: Set up Java for publishing to GitHub Packages
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Publish to GitHub Packages
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

## 🔧 CONFIGURAREA SECRETS

### Pentru GitHub Packages:
- `GITHUB_TOKEN` - Se configurează automat de GitHub

### Pentru Maven Central (OSSRH):
- `OSSRH_USERNAME` - Username-ul pentru Sonatype OSSRH
- `OSSRH_TOKEN` - Token-ul pentru Sonatype OSSRH

## 🚀 CUM SĂ TESTEZI

### 1. Pentru GitHub Packages:
1. Creează un release pe GitHub
2. Workflow-ul `publish-github-packages.yml` se va declanșa automat
3. Verifică în tab-ul "Packages" al repository-ului

### 2. Pentru Maven Central:
1. Configurează secrets-urile `OSSRH_USERNAME` și `OSSRH_TOKEN`
2. Creează un release pe GitHub
3. Workflow-ul `publish-maven-central.yml` se va declanșa automat

### 3. Pentru Dual Publishing:
1. Configurează toate secrets-urile necesare
2. Creează un release pe GitHub
3. Workflow-ul `publish-dual.yml` va publica în ambele registries

## 📁 STRUCTURA FINALĂ

```
.github/workflows/
├── maven.yml                    # CI/CD pentru build și test
├── publish-github-packages.yml  # Publishing la GitHub Packages
├── publish-maven-central.yml   # Publishing la Maven Central
└── publish-dual.yml            # Publishing la ambele registries

pom.xml                         # Configurat cu distributionManagement
```

## 🎯 TRIGGER-URI WORKFLOW

- **maven.yml**: `push` și `pull_request` (CI/CD continuu)
- **publish-*.yml**: `release` cu `types: [created]` (publishing la release)

## 📚 RESURSE UTILE

- Tutorial oficial: https://docs.github.com/en/actions/tutorials/publish-packages/publish-java-packages-with-maven
- GitHub Packages: https://docs.github.com/en/packages
- Maven Central: https://central.sonatype.org/
- Repository: https://github.com/LupuNicu/ACI-IT-Lab2

## ✅ STATUS IMPLEMENTARE

- [x] Configurare pom.xml
- [x] Workflow GitHub Packages
- [x] Workflow Maven Central
- [x] Workflow Dual Publishing
- [x] Documentație completă
- [x] Commit și push la GitHub

## 🔍 VERIFICARE

Pentru a verifica că totul funcționează:
1. Accesează https://github.com/LupuNicu/ACI-IT-Lab2
2. Verifică tab-ul "Actions" pentru workflow-uri
3. Creează un release pentru a testa publishing-ul
4. Verifică tab-ul "Packages" pentru packages publicate
